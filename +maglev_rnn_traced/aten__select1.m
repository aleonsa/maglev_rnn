classdef aten__select1 < nnet.layer.Layer & nnet.layer.Formattable & ...
        nnet.layer.AutogeneratedFromPyTorch & nnet.layer.Acceleratable
    %aten__select1 Auto-generated custom layer
    % Auto-generated by MATLAB on 08-Jun-2025 22:01:30
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        select_14
        select_15
        
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__select1(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 2;
            obj.NumOutputs = 2;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [select_16, select_16_rank] = predict(obj,select_12, select_12_rank)
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [select_12, select_12_format] = maglev_rnn_traced.ops.permuteToReversePyTorch(select_12, '', numel(select_12_rank));
            [select_12] = struct('value', select_12, 'rank', int64(numel(select_12_rank)));
            
            [select_16] = tracedPyTorchFunction(obj,select_12,false,"predict");
            
            [select_16_rank] = ones([1,select_16.rank], 'single');
            select_16_rank = dlarray(select_16_rank,'UU');
            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(select_16.value) == 'U'))
                select_16 = permute(select_16.value, fliplr(1:max(2,select_16.rank)));
            end
            
        end
        
        
        
        function [select_16, select_16_rank] = forward(obj,select_12, select_12_rank)
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [select_12, select_12_format] = maglev_rnn_traced.ops.permuteToReversePyTorch(select_12, '', numel(select_12_rank));
            [select_12] = struct('value', select_12, 'rank', int64(numel(select_12_rank)));
            
            [select_16] = tracedPyTorchFunction(obj,select_12,true,"forward");
            
            [select_16_rank] = ones([1,select_16.rank], 'single');
            select_16_rank = dlarray(select_16_rank,'UU');
            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(select_16.value) == 'U'))
                select_16 = permute(select_16.value, fliplr(1:max(2,select_16.rank)));
            end
            
        end
        
        
        
        function [select_16] = tracedPyTorchFunction(obj,select_12,isForward,predict)
            
            [select_14] = maglev_rnn_traced.ops.makeStructForConstant(int64(obj.select_14), int64(0), "Typed");
            [select_15] = maglev_rnn_traced.ops.makeStructForConstant(int64(obj.select_15), int64(0), "Typed");
            [select_16_steps] = maglev_rnn_traced.ops.makeStructForConstant(int64(1), int64(0), "Typed");
            [select_16] = maglev_rnn_traced.ops.pySlice(select_12, select_14, select_15, select_15, select_16_steps, true);
        end
        
    end
end

