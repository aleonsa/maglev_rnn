classdef aten__squeeze4 < nnet.layer.Layer & nnet.layer.Formattable & ...
        nnet.layer.AutogeneratedFromPyTorch & nnet.layer.Acceleratable
    %aten__squeeze4 Auto-generated custom layer
    % Auto-generated by MATLAB on 08-Jun-2025 22:01:30
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        
        
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__squeeze4(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 2;
            obj.NumOutputs = 1;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [squeeze_22] = predict(obj,squeeze_21, squeeze_21_rank)
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [squeeze_21, squeeze_21_format] = maglev_rnn_traced.ops.permuteToReversePyTorch(squeeze_21, '', numel(squeeze_21_rank));
            [squeeze_21] = struct('value', squeeze_21, 'rank', int64(numel(squeeze_21_rank)));
            
            [squeeze_22] = tracedPyTorchFunction(obj,squeeze_21,false,"predict");
            
            
            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(squeeze_22.value) == 'U'))
                squeeze_22 = permute(squeeze_22.value, fliplr(1:max(2,squeeze_22.rank)));
            end
            
        end
        
        
        
        function [squeeze_22] = forward(obj,squeeze_21, squeeze_21_rank)
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [squeeze_21, squeeze_21_format] = maglev_rnn_traced.ops.permuteToReversePyTorch(squeeze_21, '', numel(squeeze_21_rank));
            [squeeze_21] = struct('value', squeeze_21, 'rank', int64(numel(squeeze_21_rank)));
            
            [squeeze_22] = tracedPyTorchFunction(obj,squeeze_21,true,"forward");
            
            
            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(squeeze_22.value) == 'U'))
                squeeze_22 = permute(squeeze_22.value, fliplr(1:max(2,squeeze_22.rank)));
            end
            
        end
        
        
        
        function [squeeze_22] = tracedPyTorchFunction(obj,squeeze_21,isForward,predict)
            
            [squeeze_22] = maglev_rnn_traced.ops.pySqueeze(squeeze_21);
        end
        
    end
end

