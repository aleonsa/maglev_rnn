classdef aten__slice2 < nnet.layer.Layer & nnet.layer.Formattable & ...
        nnet.layer.AutogeneratedFromPyTorch & nnet.layer.Acceleratable
    %aten__slice2 Auto-generated custom layer
    % Auto-generated by MATLAB on 08-Jun-2025 22:01:30
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        slice_14
        slice_9
        slice_10
        slice_141
        
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__slice2(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 2;
            obj.NumOutputs = 2;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [slice_input_1, slice_input_1_rank] = predict(obj,slice_16, slice_16_rank)
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [slice_16, slice_16_format] = maglev_rnn_traced.ops.permuteToReversePyTorch(slice_16, '', numel(slice_16_rank));
            [slice_16] = struct('value', slice_16, 'rank', int64(numel(slice_16_rank)));
            
            [slice_input_1] = tracedPyTorchFunction(obj,slice_16,false,"predict");
            
            [slice_input_1_rank] = ones([1,slice_input_1.rank], 'single');
            slice_input_1_rank = dlarray(slice_input_1_rank,'UU');
            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(slice_input_1.value) == 'U'))
                slice_input_1 = permute(slice_input_1.value, fliplr(1:max(2,slice_input_1.rank)));
            end
            
        end
        
        
        
        function [slice_input_1, slice_input_1_rank] = forward(obj,slice_16, slice_16_rank)
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [slice_16, slice_16_format] = maglev_rnn_traced.ops.permuteToReversePyTorch(slice_16, '', numel(slice_16_rank));
            [slice_16] = struct('value', slice_16, 'rank', int64(numel(slice_16_rank)));
            
            [slice_input_1] = tracedPyTorchFunction(obj,slice_16,true,"forward");
            
            [slice_input_1_rank] = ones([1,slice_input_1.rank], 'single');
            slice_input_1_rank = dlarray(slice_input_1_rank,'UU');
            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(slice_input_1.value) == 'U'))
                slice_input_1 = permute(slice_input_1.value, fliplr(1:max(2,slice_input_1.rank)));
            end
            
        end
        
        
        
        function [slice_input_1] = tracedPyTorchFunction(obj,slice_16,isForward,predict)
            
            [slice_14] = maglev_rnn_traced.ops.makeStructForConstant(int64(obj.slice_14), int64(0), "Typed");
            [slice_9] = maglev_rnn_traced.ops.makeStructForConstant(int64(obj.slice_9), int64(0), "Typed");
            [slice_10] = maglev_rnn_traced.ops.makeStructForConstant(int64(obj.slice_10), int64(0), "Typed");
            [slice_141] = maglev_rnn_traced.ops.makeStructForConstant(int64(obj.slice_141), int64(0), "Typed");
            [slice_input_1] = maglev_rnn_traced.ops.pySlice(slice_16, slice_14, slice_9, slice_10, slice_141, false);
        end
        
    end
end

